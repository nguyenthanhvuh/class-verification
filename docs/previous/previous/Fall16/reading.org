#+STARTUP: showall

#+TITLE:     CSCE990 Software Verification - READINGS
#+AUTHOR:    ThanhVu H. Nguyen
#+EMAIL:     tnguyen@cse.unl.edu
#+OPTIONS: toc:nil num:nil ^:nil
#+OPTIONS: html-postamble:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../Pub/solarized-light.css"/>

* Reading List
*** First Day of Class
1. JHala et al., [[./SoftwareModelChecking.pdf][Software Model Checking]],  ACM Computing Surveys, 2009 *Chapter 1* 

*** Software Verification Overview & Model Checking
1. JHala et al., [[./SoftwareModelChecking.pdf][Software Model Checking]], ACM Computing Surveys, 2009 *Chapters 2,3*
-  JHala et al.,[[./SoftwareModelChecking.pdf][ Software Model Checking]], ACM Computing Surveys, 2009 *Chapters 4,5*
- Clark et al., [[./clarke-et-al-cav-2000.pdf][Counter-Example Guided Abstract Refinement]] CAV,  2000
-  JHala et al., [[./SoftwareModelChecking.pdf][Software Model Checking]],  ACM Computing Surveys, 2009 *Chapters 6,7*
-  JHala et al., [[./SoftwareModelChecking.pdf][Software Model Checking]],  ACM Computing Surveys, 2009 *Chapters 8,9,10*
- Ball et al., [[./ball.pdf][Automatic predicate abstraction of C programs]] PLDI, 2001


- Lecture by Matt Dwyer on Model Checking (9/6)
  1. Reading: Stephan Merz, [[./mc-tutorial.pdf][Model Checking: A Tutorial Overview]], Modeling and Verification of Parallel Processes, 2001 
  - Class Notes: Tevfik Bultan, [[http://www.cs.ucsb.edu/~bultan/courses/267/cavnotes.pdf][Introduction to Temporal Logic and Model Checking]]
 
*** Automated Debuggig
1. Andreas Zeller: [[https://www.st.cs.uni-saarland.de/publications/files/zeller-esec-1999.pdf][Yesterday, My Program Worked. Today, It Does Not. Why?]], FSE, 1999

 Tool: http://www.st.cs.uni-saarland.de/dd/

- James A. Jones et al., [[http://www.cc.gatech.edu/~stasko/papers/icse02.pdf][Visualization of test information to assist fault localization]], ICSE, 2002
- Liblit et al., [[http://dl.acm.org/citation.cfm?id=1065014][Scalable statistical bug isolation]], PLDI, 2005
- Flanagan et al., [[./p234-leino.pdf][Extended Static Checking for Java]], PLDI , 2002 *Ten-Year Most Influential Paper Award* 

*Optional*
- Nathaniel Ayewah, David Hovemeyer, J. David Morgenthaler, John Penix, William Pugh: Using Static Analysis to Find Bugs. IEEE Software 25(5): 22-29 (2008) 
- (Optional) Joseph R. Ruthruff, John Penix, J. David Morgenthaler, Sebastian G. Elbaum, Gregg Rothermel: Predicting accurate and actionable static analysis warnings: an experimental approach. ICSE 2008
- (Optional) Al Bessey, Ken Block, Ben Chelf, Andy Chou, Bryan Fulton, Seth Hallem, Charles Henri-Gros, Asya Kamsky, Scott McPeak, Dawson Engler: A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World. CACM

*** Symbolic Execution & Test Case Generation

1. Patrice Godefroid, Nils Klarlund, Koushik Sen: [[http://dl.acm.org/citation.cfm?id=1065036][DART: directed automated random testing]], PLDI, 2005

- Cadar et al., [[https://www.usenix.org/legacy/event/osdi08/tech/full_papers/cadar/cadar.pdf][KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs]], OSDI, 2008
 
 Tool: *KLEE*

- Raul A. Santelices, Pavan Kumar Chittimalli, Taweesup Apiwattanapong, Alessandro Orso, Mary Jean Harrold: [[http://dl.acm.org/citation.cfm?id=1642959][Test-Suite Augmentation for Evolving Software]], ASE, 2008.


- Lecture by Willem Visser on Symbolic Execution (10/13)

*Optional*
-  T. Ball and S. K. Rajamani. The SLAM project: Debugging system software via static  analysis. POPL, 2002 

*** Invariants Analysis
1. Michael D. Ernst, Jake Cockrell, William G. Griswold, David Notkin, [[http://homes.cs.washington.edu/~mernst/pubs/invariants-icse99.pdf][Dynamically Discovering Likely Program Invariants to Support Program Evolution]], IEEE Trans. Software Eng 2001.

 Tool: *Daikon*

- Flanagan, Cormac, and K. Rustan M. Leino, [[./esc-houdini.ps][Houdini, an annotation assistant for ESC/Java]], International Symposium of Formal Methods (FM),  2001.

- Findler et al, [[http://dl.acm.org/citation.cfm?id=581484][Contracts for Higher-Order Functions]], ICFP 2002

- Sawmy et al., [[http://dl.acm.org/citation.cfm?id=2837655][Dependent Types and Multi-Monadic Effects in F*]], POPL, 2016

 Tool: [[https://www.fstar-lang.org/tutorial/][F* online tutorial]]

*Optional*
- ThanhVu Nguyen, Deepak Kapur, Westley Weimer, and Stephanie Forrest, [[https://cse.unl.edu/~tnguyen/Pub/icse2012.pdf][Using Dynamic Analysis to Discover Polynomial and Array Invariants]], ICSE, 2012. 

 Tool: *DIG*


*** Program Slicing
1. Horwitz et al., [[http://dl.acm.org/citation.cfm?id=53994][Interprocedural Slicing Using Dependence Graphs]], PLDI 1988 
2. Agrawal et al., [[http://dl.acm.org/citation.cfm?id=93576][Dynamic Program Slicing]], PLDI, 1990

*Optional*
- Reps et al., Precise Interprocedural Dataflow Analysis via Graph Reachability

*** Program Repair
1. Westley Weimer, ThanhVu Nguyen, Claire Le Goues, Stephanie Forrest, [[http://dl.acm.org/citation.cfm?id=1555051][Automatically finding patches using genetic programming]], International Conference on Software Engineering,  2009

 Tool: *GenProg*

- Mechtaev, Sergey, Jooyong Yi, and Abhik Roychoudhury, [[http://dl.acm.org/citation.cfm?id=2884807][Angelix: Scalable multiline program patch synthesis via symbolic analysis]], International Conference on Software Engineering, 2016.

 Tool: *Angelix*


*** Program Synthesis
1. Armando Solar-Lezama, Liviu Tancau, Rastislav Bodik, Vijay Saraswat, Sanjit A. Seshia, [[https://people.csail.mit.edu/asolar/papers/asplos06-final.pdf][Combinatorial Sketching for Finite Programs]], ASPLOS 2006.

 Tool: *Sketch* 

- Saurabh Srivastava, Sumit Gulwani, Jeffrey S. Foster, [[http://dl.acm.org/citation.cfm?id=1706337][From program verification to program synthesis]], POPL, 2010

*Optional*
- Alur, et al., *Syntax-guided synthesis*, Dependable Software Systems Engineering, 2015.


*** Theorem Proving
1. Daniel Kroening, [[./ch2.pdf][Chapter2. Decision Procedures for Propositional Logic]] (pages 25-50, cover both DPLL and BDD). Note: you might want to start with this introduction to the [[https://en.wikipedia.org/wiki/DPLL_algorithm][DPLL]] algorithm from Wikipedia.  

 Tool: *Z3* 

- [[https://coq.inria.fr/distrib/current/files/Tutorial.pdf][The Coq Proof Assistant: A Tutorial]] (read up to and including Section 1.3.4)

 Tool: *Coq*

*Optional*
1. Ganzinger et al., [[./dpllt.pdf][DPLL(T ): Fast Decision Procedures]], CAV, 2004. 



*** Type Checking / Inferrence
1. Hindley-Milner type system 
 [[https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system][Wikipedia]]

- Seidel et al., [[http://eric.seidel.io/pub/nanomaly-icfp16.pdf][Dynamic Witnesses for Static Type Errors]], ICFP 2016 

*Optional*
- Patrick Rondon, Ming Kawaguchi, Ranjit Jhala, [[http://goto.ucsd.edu/~rjhala/liquid/liquid_types_techrep.pdf][Liquid Types]], PLDI, 2008


*** Concurrent Programs
0. Lecture by Matt Dwyer on CIVL
- TBA
- TBA



 

# *** Test Case Generation


# Koushik Sen et al., CUTE: a concolic unit testing engine for C, ACM SIGSOFT Software Engineering Notes, 2005.


# (Best Paper Award)

# *** Testing

# A. Rivers and M. Vouk. Resource-Constrained Non-Operational Testing of Software. ISSRE 1998: 154-163 
# (Best Paper Award) [ link goes to Book Chapter, which has similar text to ISSRE paper ]
# Gregg Rothermel, Roland H. Untch, Chengyun Chu, Mary Jean Harrold: Prioritizing Test Cases For Regression Testing. IEEE Trans. Software Eng. 27(10): 929-948 (2001)
# Sara Sprenkle, Sreedevi Sampath, Emily Gibson, Lori L. Pollock, Amie L. Souter: An Empirical Comparison of Test Suite Reduction Techniques for User-Session-Based Testing of Web Applications. ICSM 2005: 587-596 
# [ FILE Link ]
# Audris Mockus, Nachiappan Nagappan, and Trung T. Dinh-Trong. Test coverage and post-verification defects: A multiple case study. Empirical Software Engineering and Measurement 2009: 291-301 
# [ Slides ]

# *** Proof-Carrying Code

# J. Gregory Morrisett, David Walker, Karl Crary, Neal Glew: From System F to Typed Assembly Language. POPL 1998: 85-97 
# [ Project Website ]
# George C. Necula, Peter Lee: The design and implementation of a certifying compiler (with retrospective) Best of PLDI 1998: 612-625 
# (Best Paper Award) [ Project Website ]
# Parallel Programs

# Charles Edwin Killian, James W. Anderson, Ranjit Jhala, Amin Vahdat: Life, Death, and the Critical Transition: Finding Liveness Bugs in Systems Code NSDI 2007 
# (Best Paper Award)
# Cormac Flanagan, Stephen N. Freund: FastTrack: efficient and precise dynamic race detection. PLDI 2009: 121-133


# *** Invariant Generation

# Ashutosh Gupta, Rupak Majumdar, Andrey Rybalchenko: From Tests to Proofs. TACAS 2009: 262-276 
# (Best Paper Award)


** Useful Info

-. William G. Griswold, [[http://cseweb.ucsd.edu/~wgg/CSE210/howtoread.html][How to Read an Engineering Research Paper]].


