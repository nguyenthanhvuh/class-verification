#+TITLE:     ASSIGNMENTS
#+AUTHOR:    ThanhVu H. Nguyen

#+OPTIONS: html-postamble:nil

#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <style> #content{max-width:none;}</style>

* Reading List

# ** COMMENT Software Verification Overview & Model Checking
# *Topics*: Hoare logic, predicate transformer, model checking, CEGAR, predicate abstraction
# 1. Hoare, [[https://www.cs.cmu.edu/~crary/819-f09/Hoare69.pdf][Axiomatic Basis for Computer Programming]], CACM, 1969
# - Dijkstra, [[./files/guardedcommands.pdf][Guarded commands, nondeterminacy and formal derivation of program]]. CACM, 1975
#   - Note: you might want to start by reading these 2 articles from Wikipedia: [[https://en.wikipedia.org/wiki/Hoare_logic][Hoare logic]] and [[https://en.wikipedia.org/wiki/Predicate_transformer_semantics][Predicate Transformer]]

# - JHala et al., [[./files/SoftwareModelChecking.pdf][Software Model Checking]],  ACM Computing Surveys, 2009 *Chapter 1* 
# - JHala et al., [[./files/SoftwareModelChecking.pdf][Software Model Checking]], ACM Computing Surveys, 2009 *Chapters 2,3*
# - Visser et al., [[https://ti.arc.nasa.gov/m/tech/rse/publications/papers/ASE00/jpf2-ase.pdf][Model Checking Programs]], ASE 2003
# -  JHala et al.,[[./files/SoftwareModelChecking.pdf][ Software Model Checking]], ACM Computing Surveys, 2009 *Chapters 4,5*
# -  Ball et al., [[./files/ball.pdf][Automatic predicate abstraction of C programs]] PLDI, 2001

# # -  JHala et al., [[./SoftwareModelChecking.pdf][Software Model Checking]],  ACM Computing Surveys, 2009 *Chapters 6,7*
# # -  JHala et al., [[./SoftwareModelChecking.pdf][Software Model Checking]],  ACM Computing Surveys, 2009 *Chapters 8,9,10*
# # -  Clark et al., [[./clarke-et-al-cav-2000.pdf][Counter-Example Guided Abstract Refinement]] CAV,  2000


# *** Symbolic Execution & Test Case Generation

# 1. King,  [[https://yurichev.com/mirrors/king76symbolicexecution.pdf][Symbolic Execution and Program Testing]], CACM 1976
# # - Sarfraz Khurshid, Corina S. Pasareanu, and Willem Visser,  [[./files/GSE.pdf][Generalized Symbolic Execution for Model Checking and Testing]], TACAS 2003
# - Edward J. Schwartz, Thanassis Avgerinos, David Brumley,  [[https://edmcman.github.io/papers/oakland10.pdf][All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution]], Oakland 2010

# # - Cadar et al., [[https://www.usenix.org/legacy/event/osdi08/tech/full_papers/cadar/cadar.pdf][KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs]], OSDI, 2008
# # Tool: *KLEE*
# # - Raul A. Santelices, Pavan Kumar Chittimalli, Taweesup Apiwattanapong, Alessandro Orso, Mary Jean Harrold: [[http://dl.acm.org/citation.cfm?id=1642959][Test-Suite Augmentation for Evolving Software]], ASE, 2008.
# # Patrice Godefroid, Nils Klarlund, Koushik Sen: [[http://dl.acm.org/citation.cfm?id=1065036][DART: directed automated random testing]], PLDI, 2005
# # - Lecture by Willem Visser on Symbolic Execution (10/13)

# *Optional*
# -  T. Ball and S. K. Rajamani. The SLAM project: Debugging system software via static  analysis. POPL, 2002 


# *** Automatic Invariants Generation
# *Topics*: Dynamic analysis, Daikon, DIG, CEGAR
# 1. Michael D. Ernst, Jake Cockrell, William G. Griswold, David Notkin, [[http://homes.cs.washington.edu/~mernst/pubs/invariants-icse99.pdf][Dynamically Discovering Likely Program Invariants to Support Program Evolution]], IEEE Trans. Software Eng 2001.

#  Tool: *Daikon*
# - Corina S. Pasareanu and Willem Visser: [[https://link.springer.com/chapter/10.1007/978-3-540-24732-6_13][VeriÔ¨Åcation of Java Programs using Symbolic Execution and Invariant Generation]], SPIN 2004

# Optional:
# - Findler et al, [[http://dl.acm.org/citation.cfm?id=581484][Contracts for Higher-Order Functions]], ICFP 2002
# - Flanagan, Cormac, and K. Rustan M. Leino, [[./files/esc-houdini.ps][Houdini, an annotation assistant for ESC/Java]], International Symposium of Formal Methods (FM),  2001.
# - Nguyen et al., [[https://cse.unl.edu/~tnguyen/Pub/dig2.pdf][Counterexample-guided Approach to Finding Numerical Invariants]], FSE 2017

#  Tool: [[https://bitbucket.org/nguyenthanhvuh/dig2/][DIG]]


# # - Sawmy et al., [[http://dl.acm.org/citation.cfm?id=2837655][Dependent Types and Multi-Monadic Effects in F*]], POPL, 2016

# #  Tool: [[https://www.fstar-lang.org/tutorial/][F* online tutorial]]

# # *Optional*
# # - ThanhVu Nguyen, Deepak Kapur, Westley Weimer, and Stephanie Forrest, [[https://cse.unl.edu/~tnguyen/Pub/icse2012.pdf][Using Dynamic Analysis to Discover Polynomial and Array Invariants]], ICSE, 2012. 

# #  Tool: *DIG*



# # - Lecture by Matt Dwyer on Model Checking (9/6)
# #   1. Reading: Stephan Merz, [[./files/mc-tutorial.pdf][Model Checking: A Tutorial Overview]], Modeling and Verification of Parallel Processes, 2001 
# #   - Class Notes: Tevfik Bultan, [[http://www.cs.ucsb.edu/~bultan/courses/267/cavnotes.pdf][Introduction to Temporal Logic and Model Checking]]
 



# # *** Program Slicing
# # 1. Horwitz et al., [[http://dl.acm.org/citation.cfm?id=53994][Interprocedural Slicing Using Dependence Graphs]], PLDI 1988 
# # 2. Agrawal et al., [[http://dl.acm.org/citation.cfm?id=93576][Dynamic Program Slicing]], PLDI, 1990

# # *Optional*
# # - Reps et al., Precise Interprocedural Dataflow Analysis via Graph Reachability

# *** Program Synthesis/Repair
# 1. Alur, et al., [[./files/alur-fmcad.pdf][Syntax-guided synthesis]], Dependable Software Systems Engineering, 2015.
# - Armando Solar-Lezama, Liviu Tancau, Rastislav Bodik, Vijay Saraswat, Sanjit A. Seshia, [[https://people.csail.mit.edu/asolar/papers/asplos06-final.pdf][Combinatorial Sketching for Finite Programs]], ASPLOS 2006.

#  Tool: *Sketch* 
# - Westley Weimer, ThanhVu Nguyen, Claire Le Goues, Stephanie Forrest, [[http://dl.acm.org/citation.cfm?id=1555051][Automatically finding patches using genetic programming]], International Conference on Software Engineering,  2009

#  Tool: *GenProg*

# - Xuan-Bach D. Le et al., [[./files/le-fse-17-programrepairs3.pdf][S3: Syntax- and Semantic-Guided Repair Synthesis via Programming by Examples]], Foundation of Software Engineering 2017




# # - Saurabh Srivastava, Sumit Gulwani, Jeffrey S. Foster, [[http://dl.acm.org/citation.cfm?id=1706337][From program verification to program synthesis]], POPL, 2010



# *** Automated Debugging
# *Topics*: delta debugging, statistical debugging, ESC/Java

# 1. Andreas Zeller: [[https://www.st.cs.uni-saarland.de/publications/./files/zeller-esec-1999.pdf][Yesterday, My Program Worked. Today, It Does Not. Why?]], FSE, 1999

#  Tool: http://www.st.cs.uni-saarland.de/dd/

# - James A. Jones et al., [[http://www.cc.gatech.edu/~stasko/papers/icse02.pdf][Visualization of test information to assist fault localization]], ICSE, 2002
# - Flanagan et al., [[./files/p234-leino.pdf][Extended Static Checking for Java]], PLDI , 2002 *Ten-Year Most Influential Paper Award* 
# - David Hovemeyer and William Pugh, [[http://dl.acm.org/citation.cfm?id=1052895][Finding bugs is easy]], OOPSLA, 2004

# # *Optional*
# # - Nathaniel Ayewah, David Hovemeyer, J. David Morgenthaler, John Penix, William Pugh: Using Static Analysis to Find Bugs. 2008 
# # - Liblit et al., [[http://dl.acm.org/citation.cfm?id=1065014][Scalable statistical bug isolation]], PLDI, 2005
# # - Joseph R. Ruthruff, John Penix, J. David Morgenthaler, Sebastian G. Elbaum, Gregg Rothermel: Predicting accurate and actionable static analysis warnings: an experimental approach. ICSE 2008
# # - Al Bessey, Ken Block, Ben Chelf, Andy Chou, Bryan Fulton, Seth Hallem, Charles Henri-Gros, Asya Kamsky, Scott McPeak, Dawson Engler: A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World. CACM

# *** Logics
# *Topics*: First Order Logic, SMT Solving, DPLL, Separation Logic
# - [[https://en.wikipedia.org/wiki/Propositional_calculus][Propositional calculus]]
# - [[https://en.wikipedia.org/wiki/Conflict-Driven_Clause_Learning][Conflict Driven Clause Learning]]
# - [[https://en.wikipedia.org/wiki/First-order_logic][First-Order Logic]]
# - [[https://en.wikipedia.org/wiki/Satisfiability_modulo_theories][SMT Solver]]
#  Tool: *Z3* 
# - O' Hearn,  [[http://www0.cs.ucl.ac.uk/staff/p.ohearn/papers/Marktoberdorf11LectureNotes.pdf][A Primer on Separation Logic]], Read Chapters 1-3 
# *Optional*
# - [[./files/08-seplogic.pdf][Slides from NUS about Separation Logic]]


# # - [[https://coq.inria.fr/distrib/current/./files/Tutorial.pdf][The Coq Proof Assistant: A Tutorial]] (read up to and including Section 1.3.4)

# # Tool: *Coq*

# # *Optional*
# # 1. Ganzinger et al., [[./files/dpllt.pdf][DPLL(T ): Fast Decision Procedures]], CAV, 2004. 



# *** Type Checking / Inferrence
# 1. Hindley-Milner type system 
#  [[https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system][Wikipedia]]

# - Seidel et al., [[http://eric.seidel.io/pub/nanomaly-icfp16.pdf][Dynamic Witnesses for Static Type Errors]], ICFP 2016 

# *Optional*
# - Patrick Rondon, Ming Kawaguchi, Ranjit Jhala, [[http://goto.ucsd.edu/~rjhala/liquid/liquid_types_techrep.pdf][Liquid Types]], PLDI, 2008


# *** Concurrent Programs
# 0. Lecture by Matt Dwyer on CIVL
# - TBA
# - TBA



 

# # *** Test Case Generation


# # Koushik Sen et al., CUTE: a concolic unit testing engine for C, ACM SIGSOFT Software Engineering Notes, 2005.


# # (Best Paper Award)

# # *** Testing

# # A. Rivers and M. Vouk. Resource-Constrained Non-Operational Testing of Software. ISSRE 1998: 154-163 
# # (Best Paper Award) [ link goes to Book Chapter, which has similar text to ISSRE paper ]
# # Gregg Rothermel, Roland H. Untch, Chengyun Chu, Mary Jean Harrold: Prioritizing Test Cases For Regression Testing. IEEE Trans. Software Eng. 27(10): 929-948 (2001)
# # Sara Sprenkle, Sreedevi Sampath, Emily Gibson, Lori L. Pollock, Amie L. Souter: An Empirical Comparison of Test Suite Reduction Techniques for User-Session-Based Testing of Web Applications. ICSM 2005: 587-596 
# # [ FILE Link ]
# # Audris Mockus, Nachiappan Nagappan, and Trung T. Dinh-Trong. Test coverage and post-verification defects: A multiple case study. Empirical Software Engineering and Measurement 2009: 291-301 
# # [ Slides ]

# # *** Proof-Carrying Code

# # J. Gregory Morrisett, David Walker, Karl Crary, Neal Glew: From System F to Typed Assembly Language. POPL 1998: 85-97 
# # [ Project Website ]
# # George C. Necula, Peter Lee: The design and implementation of a certifying compiler (with retrospective) Best of PLDI 1998: 612-625 
# # (Best Paper Award) [ Project Website ]
# # Parallel Programs

# # Charles Edwin Killian, James W. Anderson, Ranjit Jhala, Amin Vahdat: Life, Death, and the Critical Transition: Finding Liveness Bugs in Systems Code NSDI 2007 
# # (Best Paper Award)
# # Cormac Flanagan, Stephen N. Freund: FastTrack: efficient and precise dynamic race detection. PLDI 2009: 121-133


# # *** Invariant Generation

# # Ashutosh Gupta, Rupak Majumdar, Andrey Rybalchenko: From Tests to Proofs. TACAS 2009: 262-276 
# # (Best Paper Award)


# ** Useful Info

# -. William G. Griswold, [[http://cseweb.ucsd.edu/~wgg/CSE210/howtoread.html][How to Read an Engineering Research Paper]].








* Reading List

** Program Analysis Background
1. Fuzzing:
   - [[https://patricegodefroid.github.io/public_psfiles/Fuzzing-101-CACM2020.pdf][Fuzzing: Hack, Art, and Science]]
   - [[https://arxiv.org/pdf/1808.09700.pdf][Evaluating Fuzz Testing]]
1. Model Checking
   - [[https://dl.acm.org/doi/pdf/10.1145/1592761.1592781][Model Checking: Algorithmic Verification and Debugging]] Turing Award Lecture
1. Symbolic Execution
1. Abstract Intepretation


** Domain 1: Deep Neural Networks
1. Concolic Testing DNN ASE '18
1. Reluplex
1. NNV
1. ERAN

** Domain 2: IoT systems


** Domain 3: Robotics
